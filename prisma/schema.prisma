// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Room          Room[]
  Participant   Participant[]
  Transcript    Transcript[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @id @unique @default(cuid())
  metadata    String?       @db.Text
  slug        String?
  OwnerId     String
  Owner       User          @relation(fields: [OwnerId], references: [id], onDelete: Cascade)
  summary     String?       @db.Text
  Transcript  Transcript[]
  Participant Participant[]

  @@index([OwnerId])
}

model Participant {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  UserId    String
  User      User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
  RoomName  String
  Room      Room     @relation(fields: [RoomName], references: [name], onDelete: Cascade)

  @@id([UserId, RoomName])
  @@index([UserId])
  @@index([RoomName])
}

model Transcript {
  Room          Room?    @relation(fields: [roomName], references: [name])
  roomName      String?
  transcription String?  @db.Text
  createdAt     DateTime @default(now())
  id            Int      @id @default(autoincrement())
  userId        String?
  User          User?    @relation(fields: [userId], references: [id])

  @@index([roomName])
  @@index([userId])
}
